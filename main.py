import os
import telebot
from telebot import types
from pymongo import MongoClient

token = os.environ.get("SOLARIS_TOKEN")
bot = telebot.TeleBot(token)

client = MongoClient('mongodb://localhost:27017/')
db = client['RatingSolaris']
collection = db['Ratings']

data = {}
is_start = {}


@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.username == "pi31415926535qwerty":
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Æ–ª–∏—è, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É  /get  –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return
    if is_start.get(message.chat.id):
        bot.send_message(message.chat.id, "–í–Ω–∞—á–∞–ª–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ü—Ä–µ–¥—ã–¥—â—É–∏–π –æ—Ç–∑—ã–≤")
    else:
        is_start[message.chat.id] = True
        keyboard = types.InlineKeyboardMarkup()
        key_start = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="start")
        keyboard.add(key_start)
        text = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü

        –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç –°–æ–ª—è—Ä–∏—Å–∞! –ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ, –∏ –º—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à –æ—Ç–∑—ã–≤.

        –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –∫—É—Ä—Å—ã –µ—â–µ –ª—É—á—à–µ. 

        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–µ–ª–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!"""
        bot.send_message(message.from_user.id, text, reply_markup=keyboard)


@bot.message_handler(commands=['get'])
def get(message):
    if message.from_user.username == "pi31415926535qwerty":
        text = ""
        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ, –≤—ã—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏...")
        for i in list(collection.find()):
            text += f"–§–ò–û: {i['name']}\n"
            text += f"–í–æ–∑—Ä–∞—Å—Ç: {i['age']}\n"
            text += f"–ö–ª–∞—Å—Å: {i['class']}"
            text += f"–ö—É—Ä—Å: {i['direction']}"


@bot.callback_query_handler(func=lambda call: call.data == "start")
def callback_worker(call):
    message = call.message
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.")
    bot.register_next_step_handler(message, get_name)


def get_name(message):
    data[message.chat.id] = {
        "user_id": message.chat.id,
        "username": message.from_user.username,
        "name": message.text,
        "age": 0,
        "direction": "",
        "q1": "",
        "q2": "",
        "q3": "",
        "q4": "",
        "q5": "",
        "class": "",
        "detailed_feedback": "",
        "rating": 0
    }
    bot.send_message(chat_id=message.chat.id, text="–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å?")
    bot.register_next_step_handler(message, get_class)


def get_class(message):
    data[message.chat.id]["class"] = message.text
    bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.")
    bot.register_next_step_handler(message, get_age)


def get_courses():
    with open('courses.txt', encoding='utf8') as f:
        courses = f.read().strip().split('\n')
    return courses


def get_age(message):
    data[message.chat.id]["age"] = int(message.text)
    text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞/–∏–Ω—Ç–µ–Ω—Å–∏–≤–∞/—Å–º–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–æ—à–ª–∏:"
    bot.send_message(chat_id=message.chat.id, text=text)
    bot.register_next_step_handler(message, get_course)


def get_course(message):
    data[message.chat.id]["direction"] = message.text
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text="–î–∞", callback_data="q1_yes")
    keyboard.add(yes)
    no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="q1_no")
    keyboard.add(no)

    bot.send_message(chat_id=message.chat.id,
                     text="–ü—Ä–æ–∂–∏–≤–∞–ª–∏ –ª–∏ –≤—ã –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞?",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("q1"))
def callback_q1(call):
    message = call.message
    if call.data == "q1_yes":
        data[message.chat.id]["q1"] = "–î–∞"
        keyboard = types.InlineKeyboardMarkup()
        yes = types.InlineKeyboardButton(text="–î–∞", callback_data="q2_yes")
        keyboard.add(yes)
        no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="q2_no")
        keyboard.add(no)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                              text="–£—Å—Ç—Ä–∞–∏–≤–∞–ª–∏ –ª–∏ –≤–∞—Å —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è?", reply_markup=keyboard)
    else:
        data[message.chat.id]["q1"] = "–Ω–µ—Ç"
        ask_q3(message)


def ask_q3(message, edit=True):
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text="–î–∞", callback_data="q3_yes")
    keyboard.add(yes)
    no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="q3_no")
    keyboard.add(no)
    if not edit:
        bot.send_message(chat_id=message.chat.id, text="–ë—ã–ª–∏ –ª–∏ –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã –ª–µ–∫—Ü–∏–∏?",
                         reply_markup=keyboard)
    else:
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                              text="–ë—ã–ª–∏ –ª–∏ –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã –ª–µ–∫—Ü–∏–∏?", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("q2"))
def callback_q2(call):
    message = call.message
    if call.data == "q2_yes":
        data[message.chat.id]["q2"] = "–¥–∞"
        ask_q3(message)
    else:
        data[message.chat.id]["q2"] = "–Ω–µ—Ç"
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                              text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
        bot.register_next_step_handler(message, get_dop_info)


def get_dop_info(message):
    data[message.chat.id]["q2_feedback"] = message.text
    ask_q3(message, edit=False)


@bot.callback_query_handler(func=lambda call: call.data.startswith("q3"))
def callback_q3(call):
    message = call.message
    if call.data == "q3_yes":
        data[message.chat.id]["q3"] = "–¥–∞"
    else:
        data[message.chat.id]["q3"] = "–Ω–µ—Ç"
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text="–î–∞", callback_data="q4_yes")
    keyboard.add(yes)
    no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="q4_no")
    keyboard.add(no)
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text="–°—Ç–∞–ª–∏ –±—ã –≤—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞—à–∏ –∫—É—Ä—Å—ã –¥—Ä—É–∑—å—è–º/–∑–Ω–∞–∫–æ–º—ã–º?",
                          reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("q4"))
def callback_q4(call):
    message = call.message
    if call.data == "q4_yes":
        data[message.chat.id]["q4"] = "–î–∞"
    else:
        data[message.chat.id]["q4"] = "–î–µ—Ç"
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text="–î–∞", callback_data="q5_yes")
    keyboard.add(yes)
    no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="q5_no")
    keyboard.add(no)
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text="–ü–æ—Å–µ—Ç–∏–ª–∏ –±—ã –≤—ã –¥—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã/—Å–º–µ–Ω—ã/–∏–Ω—Ç–µ–Ω—Å–∏–≤—ã –≤ –°–æ–ª—è—Ä–∏—Å–µ –µ—â–µ —Ä–∞–∑?",
                          reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("q5"))
def callback_q5(call):
    message = call.message
    if call.data == "q5_yes":
        data[message.chat.id]["q5"] = "–î–∞"
    else:
        data[message.chat.id]["q5"] = "–ù–µ—Ç"
    text = """–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤. üå†

–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –∫—É—Ä—Å–∞/—Å–º–µ–Ω—ã/–∏–Ω—Ç–µ–Ω—Å–∏–≤–∞. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∞ —á—Ç–æ –±—ã –≤—ã —É–ª—É—á—à–∏–ª–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏."""
    bot.edit_message_text(chat_id=message.chat.id, text=text, message_id=message.message_id)
    bot.register_next_step_handler(message, get_info)


def get_info(message):
    data[message.chat.id]["detailed_feedback"] = message.text
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    for i in range(1, 6):
        button = types.InlineKeyboardButton(text=str(i), callback_data=f"q7_{i}")
        buttons.append(button)
    keyboard.row(*buttons)
    bot.send_message(chat_id=message.chat.id, text="–û—Ü–µ–Ω–∏—Ç–µ –≤ —Ü–µ–ª–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç 1 –¥–æ 5",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("q7"))
def callback_q7(call):
    message = call.message
    data[message.chat.id]["rating"] = int(call.data[-1])

    user_data = data[message.chat.id]
    collection.insert_one(user_data)
    is_start[message.chat.id] = False

    text = """–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üí´

–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã. 

–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏ –≤ —É—á–µ–±–µ –∏ –Ω–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"""
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text=text)


bot.polling(none_stop=True, interval=0)
